// Gen-Spa Font Calculator v4.3 - ÂãïÁöÑ„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫Ë®àÁÆó„Å®„Éá„Éê„ÉÉ„Ç∞

(function() {
    'use strict';

    // Ë®≠ÂÆö
    const CONFIG = {
        baseWidth: 1280,      // Âü∫Ê∫ñÂπÖ
        baseHeight: 720,      // Âü∫Ê∫ñÈ´ò„Åï
        sidebarWidth: 256,    // „Çµ„Ç§„Éâ„Éê„ÉºÂπÖ
        minScale: 0.5,        // ÊúÄÂ∞è„Çπ„Ç±„Éº„É´
        maxScale: 1.5,        // ÊúÄÂ§ß„Çπ„Ç±„Éº„É´
        debugMode: true,      // „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ
        updateDelay: 100      // Êõ¥Êñ∞ÈÅÖÂª∂ÔºàmsÔºâ
    };

    // Âü∫Ê∫ñ„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫Ôºà1280pxÊôÇÔºâ
    const BASE_SIZES = {
        h1: 46,
        h2: 36,
        h3: 26,
        h4: 20,
        text: 15,
        small: 13,
        stat: 32
    };

    // „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫Ë®àÁÆóÊ©ü
    class FontCalculator {
        constructor() {
            this.slideContainers = [];
            this.resizeObserver = null;
            this.updateTimer = null;
            this.debugInfo = {};
        }

        // ÂàùÊúüÂåñ
        init() {
            console.log('üéØ Gen-Spa Font Calculator v4.3 Ëµ∑Âãï');
            
            // „Çπ„É©„Ç§„Éâ„Ç≥„É≥„ÉÜ„Éä„ÇíÂèñÂæó
            this.slideContainers = document.querySelectorAll('.slide-container');
            
            if (this.slideContainers.length === 0) {
                console.warn('„Çπ„É©„Ç§„Éâ„Ç≥„É≥„ÉÜ„Éä„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                return;
            }

            // ResizeObserver„ÇíË®≠ÂÆö
            this.setupResizeObserver();
            
            // ÂàùÂõûË®àÁÆó
            this.updateAllSlides();
            
            // „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆË®≠ÂÆö
            if (CONFIG.debugMode) {
                this.enableDebugMode();
            }
        }

        // ResizeObserver„ÅÆË®≠ÂÆö
        setupResizeObserver() {
            this.resizeObserver = new ResizeObserver(entries => {
                // „Éá„Éê„Ç¶„É≥„ÇπÂá¶ÁêÜ
                clearTimeout(this.updateTimer);
                this.updateTimer = setTimeout(() => {
                    this.updateAllSlides();
                }, CONFIG.updateDelay);
            });

            // ÂêÑ„Çπ„É©„Ç§„Éâ„Ç≥„É≥„ÉÜ„Éä„ÇíÁõ£Ë¶ñ
            this.slideContainers.forEach(container => {
                this.resizeObserver.observe(container);
            });
        }

        // „Åô„Åπ„Å¶„ÅÆ„Çπ„É©„Ç§„Éâ„ÇíÊõ¥Êñ∞
        updateAllSlides() {
            this.slideContainers.forEach((container, index) => {
                this.updateSlide(container, index);
            });

            if (CONFIG.debugMode) {
                this.updateDebugInfo();
            }
        }

        // ÂÄãÂà•„Çπ„É©„Ç§„Éâ„ÅÆÊõ¥Êñ∞
        updateSlide(container, index) {
            const rect = container.getBoundingClientRect();
            const width = rect.width;
            const height = rect.height;
            
            // „Çπ„Ç±„Éº„É´Ë®àÁÆó
            const scale = this.calculateScale(width);
            
            // CSSÂ§âÊï∞„ÇíÊõ¥Êñ∞
            container.style.setProperty('--computed-scale', scale);
            container.style.setProperty('--slide-actual-width', `${width}px`);
            container.style.setProperty('--slide-actual-height', `${height}px`);
            
            // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„Çí‰øùÂ≠ò
            this.debugInfo[`slide-${index + 1}`] = {
                width: Math.round(width),
                height: Math.round(height),
                scale: scale.toFixed(3),
                aspectRatio: (width / height).toFixed(2)
            };
            
            // „Éá„Éº„ÇøÂ±ûÊÄß„ÇíÊõ¥Êñ∞Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
            if (CONFIG.debugMode) {
                container.setAttribute('data-slide-size', 
                    `${Math.round(width)}√ó${Math.round(height)} | Scale: ${scale.toFixed(2)}`);
            }
        }

        // „Çπ„Ç±„Éº„É´Ë®àÁÆó
        calculateScale(currentWidth) {
            // Âü∫Êú¨„Çπ„Ç±„Éº„É´
            let scale = currentWidth / CONFIG.baseWidth;
            
            // ÊúÄÂ∞è„ÉªÊúÄÂ§ßÂà∂Èôê
            scale = Math.max(CONFIG.minScale, Math.min(CONFIG.maxScale, scale));
            
            return scale;
        }

        // ÂÆüÈöõ„ÅÆ„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÇíË®àÁÆó
        calculateFontSize(baseSize, scale) {
            const minSize = baseSize * CONFIG.minScale;
            const maxSize = baseSize * CONFIG.maxScale;
            const targetSize = baseSize * scale;
            
            // clampÁõ∏ÂΩì„ÅÆÂá¶ÁêÜ
            return Math.max(minSize, Math.min(maxSize, targetSize));
        }

        // „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ
        enableDebugMode() {
            document.body.classList.add('debug-mode');
            
            // „Éá„Éê„ÉÉ„Ç∞„Éë„Éç„É´„Çí‰ΩúÊàê
            this.createDebugPanel();
            
            // „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                    this.toggleDebugPanel();
                }
            });
        }

        // „Éá„Éê„ÉÉ„Ç∞„Éë„Éç„É´„ÅÆ‰ΩúÊàê
        createDebugPanel() {
            const panel = document.createElement('div');
            panel.id = 'font-debug-panel';
            panel.innerHTML = `
                <div style="
                    position: fixed;
                    bottom: 20px;
                    right: 20px;
                    background: rgba(0, 0, 0, 0.9);
                    color: white;
                    padding: 20px;
                    border-radius: 8px;
                    font-family: monospace;
                    font-size: 12px;
                    max-width: 400px;
                    z-index: 10000;
                    display: none;
                ">
                    <h3 style="margin: 0 0 10px 0; font-size: 14px;">
                        üîç Font Calculator Debug
                    </h3>
                    <div id="debug-content"></div>
                    <hr style="margin: 10px 0; opacity: 0.3;">
                    <div style="opacity: 0.7;">
                        Press Ctrl+Shift+D to toggle
                    </div>
                </div>
            `;
            document.body.appendChild(panel);
        }

        // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÅÆÊõ¥Êñ∞
        updateDebugInfo() {
            const debugContent = document.getElementById('debug-content');
            if (!debugContent) return;

            const viewport = {
                width: window.innerWidth,
                height: window.innerHeight,
                available: window.innerWidth - CONFIG.sidebarWidth
            };

            let html = `
                <div style="margin-bottom: 10px;">
                    <strong>„Éì„É•„Éº„Éù„Éº„Éà:</strong><br>
                    ${viewport.width} √ó ${viewport.height}px<br>
                    Âà©Áî®ÂèØËÉΩÂπÖ: ${viewport.available}px
                </div>
            `;

            // ÂêÑ„Çπ„É©„Ç§„Éâ„ÅÆÊÉÖÂ†±
            Object.entries(this.debugInfo).forEach(([slideId, info]) => {
                html += `
                    <div style="margin-bottom: 10px;">
                        <strong>${slideId}:</strong><br>
                        „Çµ„Ç§„Ç∫: ${info.width} √ó ${info.height}px<br>
                        „Çπ„Ç±„Éº„É´: ${info.scale}<br>
                        „Ç¢„Çπ„Éö„ÇØ„ÉàÊØî: ${info.aspectRatio}
                    </div>
                `;
            });

            // „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫Ë®àÁÆó‰æã
            const currentScale = this.debugInfo['slide-1']?.scale || 1;
            html += `
                <div style="margin-top: 10px; padding-top: 10px; border-top: 1px solid rgba(255,255,255,0.3);">
                    <strong>„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫ (ÁèæÂú®„ÅÆ„Çπ„Ç±„Éº„É´: ${currentScale}):</strong><br>
            `;

            Object.entries(BASE_SIZES).forEach(([element, baseSize]) => {
                const calculated = this.calculateFontSize(baseSize, parseFloat(currentScale));
                html += `${element}: ${calculated.toFixed(1)}px (Âü∫Ê∫ñ: ${baseSize}px)<br>`;
            });

            html += '</div>';

            debugContent.innerHTML = html;
        }

        // „Éá„Éê„ÉÉ„Ç∞„Éë„Éç„É´„ÅÆË°®Á§∫ÂàáÊõø
        toggleDebugPanel() {
            const panel = document.querySelector('#font-debug-panel > div');
            if (panel) {
                panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
            }
        }

        // „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÅÆÊ§úË®º
        validateFontSizes() {
            const results = [];
            
            this.slideContainers.forEach((container, index) => {
                const elements = {
                    h1: container.querySelectorAll('h1, .title'),
                    h2: container.querySelectorAll('h2, .section-title'),
                    h3: container.querySelectorAll('h3'),
                    h4: container.querySelectorAll('h4'),
                    p: container.querySelectorAll('p'),
                    li: container.querySelectorAll('li')
                };

                Object.entries(elements).forEach(([tag, nodeList]) => {
                    nodeList.forEach(elem => {
                        const computed = window.getComputedStyle(elem);
                        const fontSize = parseFloat(computed.fontSize);
                        
                        results.push({
                            slide: index + 1,
                            element: tag,
                            fontSize: fontSize.toFixed(1),
                            expected: BASE_SIZES[tag] || BASE_SIZES.text
                        });
                    });
                });
            });

            return results;
        }

        // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        destroy() {
            if (this.resizeObserver) {
                this.resizeObserver.disconnect();
            }
            
            clearTimeout(this.updateTimer);
            
            const debugPanel = document.getElementById('font-debug-panel');
            if (debugPanel) {
                debugPanel.remove();
            }
        }
    }

    // „Ç∞„É≠„Éº„Éê„É´API„Å®„Åó„Å¶ÂÖ¨Èñã
    window.GenSpaFontCalculator = FontCalculator;

    // Ëá™ÂãïÂàùÊúüÂåñ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            const calculator = new FontCalculator();
            calculator.init();
            window.fontCalculator = calculator; // „Éá„Éê„ÉÉ„Ç∞Áî®
        });
    } else {
        const calculator = new FontCalculator();
        calculator.init();
        window.fontCalculator = calculator; // „Éá„Éê„ÉÉ„Ç∞Áî®
    }

})();