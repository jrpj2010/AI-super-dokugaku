// Gen-Spa Style Validator v4.2 - „Çπ„É©„Ç§„ÉâÂÜÖÈÉ®Ë¶ÅÁ¥†„ÅÆ„Çπ„Çø„Ç§„É´Áµ±‰∏Ä„ÇíËá™ÂãïÊ§úË®º„Éª‰øÆÊ≠£

(function() {
    'use strict';

    // „Çπ„Çø„Ç§„É´„É´„Éº„É´„ÅÆÂÆöÁæ©Ôºà„Çπ„É©„Ç§„ÉâÂÜÖÈÉ®Ë¶ÅÁ¥†„ÅÆ„Åø„ÉªÂé≥ÂØÜ„Å™Áµ±‰∏ÄÔºâ
    const STYLE_RULES = {
        // „Çø„Ç§„Éà„É´ÈöéÂ±§ÔºàÂé≥ÂØÜ„Å™Áµ±‰∏ÄÔºâ
        titles: {
            h1: {
                fontSize: { exact: 46, unit: 'px' },
                fontWeight: [700, 'bold'],
                lineHeight: { exact: 1.2 },
                color: ['#00447c'],
                marginBottom: { exact: 32, unit: 'px' }
            },
            h2: {
                fontSize: { exact: 36, unit: 'px' },
                fontWeight: [700, 'bold'],
                lineHeight: { exact: 1.3 },
                color: ['#00447c'],
                marginBottom: { exact: 24, unit: 'px' }
            },
            h3: {
                fontSize: { exact: 26, unit: 'px' },
                fontWeight: [600, 'bold'],
                lineHeight: { exact: 1.4 },
                color: ['#00447c'],
                marginBottom: { exact: 16, unit: 'px' }
            },
            h4: {
                fontSize: { exact: 20, unit: 'px' },
                fontWeight: [600, 'bold'],
                lineHeight: { exact: 1.4 },
                marginBottom: { exact: 12, unit: 'px' }
            }
        },
        
        // „ÉÜ„Ç≠„Çπ„ÉàË¶ÅÁ¥†ÔºàÂé≥ÂØÜ„Å™Áµ±‰∏ÄÔºâ
        text: {
            p: {
                fontSize: { exact: 15, unit: 'px' },
                lineHeight: { exact: 1.6 },
                marginBottom: { exact: 16, unit: 'px' },
                color: ['#333333']
            },
            li: {
                fontSize: { exact: 15, unit: 'px' },
                lineHeight: { exact: 1.6 },
                marginBottom: { exact: 10, unit: 'px' },
                color: ['#333333']
            }
        },
        
        // „Ç´„Éº„ÉâË¶ÅÁ¥†ÔºàÁµ±‰∏ÄÔºâ
        cards: {
            '.stat-card': {
                padding: { exact: 24, unit: 'px' },
                borderLeftWidth: { exact: 4, unit: 'px' },
                backgroundColor: ['#f8f9fa']
            },
            '.tool-card': {
                padding: { exact: 24, unit: 'px' },
                borderLeftWidth: { exact: 4, unit: 'px' }
            },
            '.approach-card': {
                padding: { exact: 24, unit: 'px' },
                borderTopWidth: { exact: 3, unit: 'px' }
            },
            '.insight-card': {
                padding: { exact: 24, unit: 'px' },
                borderLeftWidth: { exact: 4, unit: 'px' },
                backgroundColor: ['#f8f9fa']
            }
        },
        
        // ÈñìÈöî„ÅÆ‰∏ÄË≤´ÊÄß
        spacing: {
            sectionMargin: { exact: 48, unit: 'px' },
            elementGap: { exact: 24, unit: 'px' }
        }
    };

    // Ê§úË®ºÁµêÊûú„Çí‰øùÂ≠ò
    let validationResults = [];

    // „Çπ„Çø„Ç§„É´„ÇíÊ§úË®º
    function validateStyles() {
        console.log('üîç Gen-Spa v4.2 „Çπ„É©„Ç§„ÉâÂÜÖÈÉ®„Çπ„Çø„Ç§„É´Ê§úË®º„ÇíÈñãÂßã...');
        validationResults = [];
        
        // „Çø„Ç§„Éà„É´Ë¶ÅÁ¥†„ÅÆÊ§úË®º
        validateTitleHierarchy();
        
        // „ÉÜ„Ç≠„Çπ„ÉàË¶ÅÁ¥†„ÅÆÊ§úË®º
        validateTextElements();
        
        // „Ç´„Éº„ÉâË¶ÅÁ¥†„ÅÆÊ§úË®º
        validateCardElements();
        
        // ÈñìÈöî„ÅÆÊ§úË®º
        validateSpacing();
        
        // Tailwind„ÇØ„É©„Çπ„ÅÆÊ§úÂá∫
        detectTailwindClasses();
        
        return validationResults;
    }

    // „Çø„Ç§„Éà„É´ÈöéÂ±§„ÅÆÊ§úË®ºÔºà„Çπ„É©„Ç§„ÉâÂÜÖÈÉ®„ÅÆ„ÅøÔºâ
    function validateTitleHierarchy() {
        const titles = {
            h1: document.querySelectorAll('.slide-container .title, .slide-container h1'),
            h2: document.querySelectorAll('.slide-container .section-title, .slide-container h2'),
            h3: document.querySelectorAll('.slide-container h3'),
            h4: document.querySelectorAll('.slide-container h4')
        };
        
        Object.entries(titles).forEach(([tag, elements]) => {
            elements.forEach((elem, index) => {
                const computed = window.getComputedStyle(elem);
                const rules = STYLE_RULES.titles[tag];
                
                if (!rules) return;
                
                // „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫Ê§úË®ºÔºàÂé≥ÂØÜ‰∏ÄËá¥Ôºâ
                const fontSize = parseFloat(computed.fontSize);
                const expectedSize = rules.fontSize.exact;
                if (Math.abs(fontSize - expectedSize) > 0.5) {
                    validationResults.push({
                        element: elem,
                        type: 'fontSize',
                        current: fontSize,
                        expected: rules.fontSize,
                        severity: 'high',
                        selector: `${tag} („Çπ„É©„Ç§„Éâ${elem.closest('.slide-container').id})`
                    });
                }
                
                // Ë°åÈñìÊ§úË®ºÔºàÂé≥ÂØÜ‰∏ÄËá¥Ôºâ
                const lineHeight = parseFloat(computed.lineHeight) / fontSize;
                const expectedLineHeight = rules.lineHeight.exact;
                if (Math.abs(lineHeight - expectedLineHeight) > 0.1) {
                    validationResults.push({
                        element: elem,
                        type: 'lineHeight',
                        current: lineHeight,
                        expected: rules.lineHeight,
                        severity: 'medium',
                        selector: `${tag} („Çπ„É©„Ç§„Éâ${elem.closest('.slide-container').id})`
                    });
                }
                
                // „Éû„Éº„Ç∏„É≥Ê§úË®ºÔºàÂé≥ÂØÜ‰∏ÄËá¥Ôºâ
                const marginBottom = parseFloat(computed.marginBottom);
                const expectedMargin = rules.marginBottom.exact;
                if (Math.abs(marginBottom - expectedMargin) > 2) {
                    validationResults.push({
                        element: elem,
                        type: 'marginBottom',
                        current: marginBottom,
                        expected: rules.marginBottom,
                        severity: 'medium',
                        selector: `${tag} („Çπ„É©„Ç§„Éâ${elem.closest('.slide-container').id})`
                    });
                }
            });
        });
    }

    // „ÉÜ„Ç≠„Çπ„ÉàË¶ÅÁ¥†„ÅÆÊ§úË®ºÔºà„Çπ„É©„Ç§„ÉâÂÜÖÈÉ®„ÅÆ„ÅøÔºâ
    function validateTextElements() {
        const textElements = {
            p: document.querySelectorAll('.slide-container p'),
            li: document.querySelectorAll('.slide-container li')
        };
        
        Object.entries(textElements).forEach(([tag, elements]) => {
            elements.forEach(elem => {
                // .text-sm, .text-xs „Å™„Å©„ÅÆ„ÇØ„É©„Çπ„ÇíÊåÅ„Å§Ë¶ÅÁ¥†„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å™„ÅÑÔºà‰øÆÊ≠£ÂØæË±°Ôºâ
                const computed = window.getComputedStyle(elem);
                const rules = STYLE_RULES.text[tag];
                
                const fontSize = parseFloat(computed.fontSize);
                const expectedSize = rules.fontSize.exact;
                if (Math.abs(fontSize - expectedSize) > 0.5) {
                    validationResults.push({
                        element: elem,
                        type: 'fontSize',
                        current: fontSize,
                        expected: rules.fontSize,
                        severity: 'high',
                        selector: `${tag} („Çπ„É©„Ç§„Éâ${elem.closest('.slide-container').id})`
                    });
                }
            });
        });
    }

    // „Ç´„Éº„ÉâË¶ÅÁ¥†„ÅÆÊ§úË®º
    function validateCardElements() {
        Object.entries(STYLE_RULES.cards).forEach(([selector, rules]) => {
            const elements = document.querySelectorAll(`.slide-container ${selector}`);
            
            elements.forEach(elem => {
                const computed = window.getComputedStyle(elem);
                
                // „Éë„Éá„Ç£„É≥„Ç∞Ê§úË®º
                if (rules.padding) {
                    const padding = parseFloat(computed.paddingTop);
                    const expectedPadding = rules.padding.exact;
                    if (Math.abs(padding - expectedPadding) > 2) {
                        validationResults.push({
                            element: elem,
                            type: 'padding',
                            current: padding,
                            expected: rules.padding,
                            severity: 'medium',
                            selector: `${selector} („Çπ„É©„Ç§„Éâ${elem.closest('.slide-container').id})`
                        });
                    }
                }
            });
        });
    }

    // ÈñìÈöî„ÅÆÊ§úË®º
    function validateSpacing() {
        const sections = document.querySelectorAll('.slide-container');
        
        sections.forEach((section, index) => {
            if (index > 0) {
                const computed = window.getComputedStyle(section);
                const marginBottom = parseFloat(computed.marginBottom);
                const expectedMargin = STYLE_RULES.spacing.sectionMargin.exact;
                
                if (Math.abs(marginBottom - expectedMargin) > 4) {
                    validationResults.push({
                        element: section,
                        type: 'sectionSpacing',
                        current: marginBottom,
                        expected: STYLE_RULES.spacing.sectionMargin,
                        severity: 'low',
                        selector: `„Çª„ÇØ„Ç∑„Éß„É≥ÈñìÈöî (${section.id})`
                    });
                }
            }
        });
    }

    // Tailwind„ÇØ„É©„Çπ„ÅÆÊ§úÂá∫
    function detectTailwindClasses() {
        const tailwindTextClasses = ['text-xs', 'text-sm', 'text-base', 'text-lg', 'text-xl', 'text-2xl', 'text-3xl'];
        const elements = document.querySelectorAll('.slide-container *');
        
        elements.forEach(elem => {
            const classList = Array.from(elem.classList);
            const hasTailwindText = classList.some(cls => tailwindTextClasses.includes(cls));
            
            if (hasTailwindText) {
                validationResults.push({
                    element: elem,
                    type: 'tailwindClass',
                    current: classList.join(' '),
                    expected: '„Ç´„Çπ„Çø„É†CSS„ÇØ„É©„Çπ',
                    severity: 'medium',
                    selector: `Tailwind„ÇØ„É©„ÇπÊ§úÂá∫ (${elem.tagName.toLowerCase()})`
                });
            }
        });
    }

    // „Çπ„Çø„Ç§„É´„ÇíËá™Âãï‰øÆÊ≠£
    function autoFixStyles() {
        console.log('üîß „Çπ„Çø„Ç§„É´„ÅÆËá™Âãï‰øÆÊ≠£„ÇíÈñãÂßã...');
        let fixCount = 0;
        
        validationResults.forEach(result => {
            if (result.severity === 'high' || result.severity === 'medium') {
                fixCount += fixStyle(result);
            }
        });
        
        console.log(`‚úÖ ${fixCount}ÂÄã„ÅÆ„Çπ„Çø„Ç§„É´„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü`);
        return fixCount;
    }

    // ÂÄãÂà•„ÅÆ„Çπ„Çø„Ç§„É´‰øÆÊ≠£
    function fixStyle(result) {
        const { element, type, expected } = result;
        
        try {
            switch (type) {
                case 'fontSize':
                    const targetSize = expected.exact || ((expected.min + expected.max) / 2);
                    element.style.setProperty('font-size', `${targetSize}${expected.unit}`, 'important');
                    // Tailwind„ÇØ„É©„Çπ„ÇíÂâäÈô§
                    element.classList.remove('text-xs', 'text-sm', 'text-base', 'text-lg', 'text-xl', 'text-2xl', 'text-3xl');
                    break;
                    
                case 'lineHeight':
                    const targetLineHeight = expected.exact || ((expected.min + expected.max) / 2);
                    element.style.setProperty('line-height', targetLineHeight.toString(), 'important');
                    break;
                    
                case 'marginBottom':
                    const targetMargin = expected.exact || ((expected.min + expected.max) / 2);
                    element.style.setProperty('margin-bottom', `${targetMargin}${expected.unit}`, 'important');
                    break;
                    
                case 'padding':
                    const targetPadding = expected.exact || ((expected.min + expected.max) / 2);
                    element.style.setProperty('padding', `${targetPadding}${expected.unit}`, 'important');
                    break;
                    
                case 'tailwindClass':
                    // Tailwind„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Çµ„Ç§„Ç∫„ÇØ„É©„Çπ„ÇíÂâäÈô§
                    element.classList.remove('text-xs', 'text-sm', 'text-base', 'text-lg', 'text-xl', 'text-2xl', 'text-3xl');
                    break;
            }
            
            return 1;
        } catch (e) {
            console.error('‰øÆÊ≠£„Ç®„É©„Éº:', e);
            return 0;
        }
    }

    // Ëá™ÂæãÁöÑ„É´„Éº„Éó„Åß‰øÆÊ≠£
    async function runAutoFixLoop(maxIterations = 5) {
        console.log('üîÑ Ëá™ÂæãÁöÑ„Çπ„Çø„Ç§„É´‰øÆÊ≠£„É´„Éº„Éó„ÇíÈñãÂßã...');
        console.log('ÂØæË±°: „Çπ„É©„Ç§„ÉâÂÜÖÈÉ®Ë¶ÅÁ¥†„ÅÆ„ÅøÔºà„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅØÈô§Â§ñÔºâ');
        let iteration = 0;
        let totalIssues = Infinity;
        
        while (iteration < maxIterations && totalIssues > 0) {
            iteration++;
            console.log(`\n--- „Ç§„ÉÜ„É¨„Éº„Ç∑„Éß„É≥ ${iteration} ---`);
            
            // Ê§úË®ºÂÆüË°å
            const results = validateStyles();
            totalIssues = results.filter(r => r.severity === 'high' || r.severity === 'medium').length;
            
            console.log(`Áô∫Ë¶ã„Åï„Çå„ÅüÂïèÈ°å: ${totalIssues}ÂÄã`);
            
            // Ë©≥Á¥∞„É≠„Ç∞
            if (totalIssues > 0) {
                console.log('ÂïèÈ°å„ÅÆË©≥Á¥∞:');
                results.filter(r => r.severity === 'high' || r.severity === 'medium')
                    .slice(0, 5) // ÊúÄÂàù„ÅÆ5‰ª∂„ÅÆ„ÅøË°®Á§∫
                    .forEach(r => {
                        console.log(`  - ${r.selector}: ${r.type} (ÁèæÂú®ÂÄ§: ${r.current}, ÊúüÂæÖÂÄ§: ${r.expected.exact || r.expected})`);
                    });
            }
            
            if (totalIssues === 0) {
                console.log('‚ú® „Åô„Åπ„Å¶„ÅÆ„Çπ„É©„Ç§„ÉâÂÜÖÈÉ®„Çπ„Çø„Ç§„É´„ÅåÁµ±‰∏Ä„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
                break;
            }
            
            // ‰øÆÊ≠£ÂÆüË°å
            const fixed = autoFixStyles();
            
            // Â∞ë„ÅóÂæÖÊ©üÔºàDOM„ÅÆÊõ¥Êñ∞„ÇíÂæÖ„Å§Ôºâ
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // ‰øÆÊ≠£„ÅåÈÄ≤„Çì„Åß„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÁµÇ‰∫Ü
            if (fixed === 0) {
                console.log('‚ö†Ô∏è „Åì„Çå‰ª•‰∏ä„ÅÆËá™Âãï‰øÆÊ≠£„ÅØÂõ∞Èõ£„Åß„Åô');
                break;
            }
        }
        
        // ÊúÄÁµÇ„É¨„Éù„Éº„Éà
        generateReport();
    }

    // „É¨„Éù„Éº„ÉàÁîüÊàê
    function generateReport() {
        const finalResults = validateStyles();
        const highSeverity = finalResults.filter(r => r.severity === 'high').length;
        const mediumSeverity = finalResults.filter(r => r.severity === 'medium').length;
        const lowSeverity = finalResults.filter(r => r.severity === 'low').length;
        
        console.log('\nüìä ÊúÄÁµÇ„É¨„Éù„Éº„Éà:');
        console.log(`- ÈáçÂ§ß„Å™ÂïèÈ°å: ${highSeverity}ÂÄã`);
        console.log(`- ‰∏≠Á®ãÂ∫¶„ÅÆÂïèÈ°å: ${mediumSeverity}ÂÄã`);
        console.log(`- ËªΩÂæÆ„Å™ÂïèÈ°å: ${lowSeverity}ÂÄã`);
        
        if (highSeverity === 0 && mediumSeverity === 0) {
            console.log('üéâ „Çπ„É©„Ç§„Éâ„ÅÆ„Çπ„Çø„Ç§„É´„ÅØÂÆåÂÖ®„Å´Áµ±‰∏Ä„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºÅ');
            console.log('Áµ±‰∏Ä„Åï„Çå„ÅüÂÄ§:');
            console.log('  - h1/„Çø„Ç§„Éà„É´: 46px');
            console.log('  - h2/„Çª„ÇØ„Ç∑„Éß„É≥: 36px');
            console.log('  - h3: 26px');
            console.log('  - h4: 20px');
            console.log('  - Êú¨Êñá/„É™„Çπ„Éà: 15px');
        }
        
        return {
            high: highSeverity,
            medium: mediumSeverity,
            low: lowSeverity,
            total: finalResults.length
        };
    }

    // ÊâãÂãïÂÆüË°åÁî®„ÅÆAPI
    window.GenSpaStyleValidator = {
        validate: validateStyles,
        autoFix: autoFixStyles,
        runAutoFixLoop: runAutoFixLoop,
        generateReport: generateReport
    };

    // DOM„É≠„Éº„ÉâÂæå„Å´Ëá™ÂãïÂÆüË°å
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => runAutoFixLoop(), 1000);
        });
    } else {
        setTimeout(() => runAutoFixLoop(), 1000);
    }

})();