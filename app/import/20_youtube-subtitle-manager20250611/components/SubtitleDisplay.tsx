import React, { useState } from 'react';
import { SubtitleTrack } from '../types';
import { DocumentTextIcon } from './icons';

interface SubtitleDisplayProps {
  subtitles: SubtitleTrack[]; // These tracks will have empty 'lines' from youtubeService
}

const SubtitleDisplay: React.FC<SubtitleDisplayProps> = ({ subtitles }) => {
  const [selectedLang, setSelectedLang] = useState<string>(subtitles[0]?.langCode || '');

  if (!subtitles || subtitles.length === 0) {
    return (
      <div className="p-4 text-center text-gray-500">
        <DocumentTextIcon className="w-10 h-10 mx-auto mb-2 opacity-50" />
        利用可能な字幕トラックはありません。(No subtitle tracks available.)
      </div>
    );
  }

  const activeTrack = subtitles.find(track => track.langCode === selectedLang) || subtitles[0];

  return (
    <div className="py-4">
      <div className="mb-4">
        <label htmlFor="subtitle-lang-select" className="sr-only">字幕言語を選択 (Select Subtitle Language)</label>
        <select
          id="subtitle-lang-select"
          value={selectedLang}
          onChange={(e) => setSelectedLang(e.target.value)}
          className="p-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-md focus:ring-1 focus:ring-blue-500"
        >
          {subtitles.map(track => (
            <option key={track.id || track.langCode} value={track.langCode}>
              {track.langName} {track.isAutoGenerated && '(自動生成)'} {track.kind && `(${track.kind})`}
            </option>
          ))}
        </select>
      </div>
      <div className="space-y-3 max-h-96 overflow-y-auto p-3 bg-gray-850 rounded-md border border-gray-700">
        {activeTrack ? (
          <>
            <p className="text-sm text-gray-300">
              選択されたトラック: {activeTrack.langName} {activeTrack.isAutoGenerated && '(自動生成)'}
            </p>
            <p className="text-xs text-gray-400">
              (注: 現在のバージョンでは字幕のテキスト内容は表示されません。利用可能なトラックのみがリストされます。)
            </p>
            {activeTrack.lines && activeTrack.lines.length > 0 ? activeTrack.lines.map((line, index) => (
              <div key={line.id || index} className="subtitle-item flex">
                {/* This part will likely not render as lines are empty */}
                <span className="text-xs text-blue-400 tabular-nums w-28 flex-shrink-0">
                  {/* Timestamp formatting here if needed */}
                </span>
                <p className="text-sm text-gray-200 ml-3">{line.text}</p>
              </div>
            )) : (
              <p className="text-sm text-gray-400 italic mt-2">このトラックの字幕内容は現在表示できません。</p>
            )}
          </>
        ) : (
          <p className="text-sm text-gray-400 italic">字幕トラックを選択してください。</p>
        )}
      </div>
    </div>
  );
};

export default SubtitleDisplay;