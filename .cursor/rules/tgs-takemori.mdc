---
description:
globs:
alwaysApply: false
---
# プロフェッショナルHTMLプレゼンテーション生成プロンプト（改良版）

提供される文章/記事を、daisyUI 5を使用した、McKinsey/BCG/Bainクラスの超一流コンサルティングファームが作成したような、完璧な16:9プレゼンテーションスライドHTMLに変換してください。情報設計とビジュアルデザインの両面で最高水準を目指します。

## 適応性とカスタマイズについて
このプロンプトは汎用的なテンプレートとして設計されています。以下の点に注意して、入力されるコンテンツに合わせて適切に調整してください：

- **コンテンツ適応**: 提供される文章/記事の内容に基づいて、セクション構造、データ表示方法、視覚要素を適切に調整してください。テンプレートのセクションは必要に応じて追加、削除、順序変更が可能です。
- **業界特性**: 特定の業界や分野（金融、テクノロジー、小売、医療など）に関するデータの場合、その業界に適した色使いやアイコン、用語を使用してください。
- **データ量**: 入力データの量に応じて、表示方法を最適化してください。データが多い場合は階層化して表示し、少ない場合は視覚的に強調してください。
- **目的対応**: 分析レポート、市場調査、製品紹広告ビジネス介など、プレゼンテーションの目的に合わせて、セクションの重点と表示スタイルを調整してください。

以下のデザインガイドラインとセクションテンプレートを基本としつつ、入力コンテンツに最適化された、プロフェッショナルなプレゼンテーションを作成してください。

## 基本仕様
- 各セクションがアスペクト比16:9のフレーム内に収まるよう設計し、それらを縦に積み重ねて配置する
- ページ内をスクロールして閲覧できる単一ページのプレゼンテーション形式にすること
- レスポンシブデザインとすることs
- セクション間は48-64pxの余白を設け、視覚的に区切りを明確にすること
- daisyUI 5を活用したカードベースのUIデザイン:
  * 重要情報や統計データはカード形式で表示（角丸、微妙な影効果）
  * カード間の余白は16-24pxで統一し、整列感を維持
  * 各カードは内部パディング16-20pxを確保
- スクロールベースのナビゲーションを実装し、セクション間のスムーズな移動を可能にする
- 各セクションの内容量は適切に調整:
  * 見出しセクションは簡潔かつ強調（フォントサイズ大きめ）
  * データ展開セクションは整理された形で豊富な情報を提供
  * 比較セクションはカード形式で横並びに視覚的比較を容易に
- 視覚的階層を明確にし、情報の重要度を直感的に理解できるようにする:
  * 第一階層: セクションタイトル（24-28px）+ アイコン
  * 第二階層: サブセクションタイトル（20-22px）
  * 第三階層: 重要データポイント（大きな数字36-48px + 小さな説明14-16px）
  * 第四階層: 詳細データ/説明（16-18px）
- 重要な情報は視線の中心（ゴールデンエリア）に配置すること

## 必須ナビゲーション要素
- **プログレスバー**:
  * 画面上部に固定表示するプログレスバーを実装
  * ユーザーのスクロール位置に応じて進行状況を視覚的に表示
  * 薄い背景色に対して、プライマリカラーのバーで進行を表現

- **目次ナビゲーション（TOC）**:
  * 画面右側に固定表示する点状のナビゲーションメニューを実装（必須）
  * 各セクションに対応する点（dot）を縦に配置
  * 現在表示中のセクションの点は大きく・色を変えてハイライト
  * 点をクリックすると対応するセクションにスムーズにスクロール
  * 以下のようなコードで実装（例）:
  ```html
  <div class="toc" id="toc">
    <div class="toc-item active" data-section="hero"></div>
    <div class="toc-item" data-section="section-2"></div>
    <!-- 以下、各セクションに対応する点を追加 -->
  </div>
  ```

- **セクション間移動ボタン**:
  * 各セクション内に次のセクションへ移動するボタンを配置
  * ヒーローセクションには「詳細を見る」などのボタンを配置
  * 最終セクションには「トップに戻る」ボタンを配置
  * ボタンにはマテリアルアイコンを組み合わせる（例: `<i class="material-icons">trending_up</i>詳細を見る`）

## コンサルティングファーム品質の要件
- 洗練された余白（マージン・パディング）の使用
- 論理的な情報階層（MECE原則に基づく構成）
- エグゼクティブ向けの簡潔かつパワフルな表現
- データ駆動型のビジュアル表現（グラフやチャートは最小限のノイズで最大限の情報伝達を）
- 一貫したビジュアル言語（カラーコード、アイコン、フォントの統一）
- スライド番号とセクション識別子の実装
- ハイライトカラーの戦略的使用（重要ポイントの強調）

## セクション構成と内容
以下はセクション構造の基本テンプレートです。実際のコンテンツに応じて、セクションの追加・削除・順序変更を行い、プレゼンテーションの流れを最適化してください。各セクションのタイトルと内容は、実際のデータや目的に合わせて変更してください。

### セクション1（ヒーローセクション/タイトル）
- メインタイトル（28-36px）: [プレゼンテーションのメインテーマ]
- サブタイトル（20-24px）: [対象期間や範囲の説明]
- 簡潔な概要（16-18px）: [2-3文で全体の要点を説明]
- アクション要素: [データを見る][比較する]などの操作ボタンを配置

### セクション2（調査/分析概要）
- セクションタイトル（24-28px）: [概要や背景]
- 簡潔な説明（16-18px）: [調査・分析の目的と方法を2-3文で説明]
- ハイライトカード（2-4枚を横並びに配置）:
  * 各カードには大きな数字/統計（36-48px）
  * 項目名（18-20px）
  * 簡潔な説明文（14-16px）
  * 日付や時点情報（14px）

### セクション3（主要な結果/ポイント）
- セクションタイトル（24-28px）: [主要結果/ポイント]
- 箇条書きリスト（3-5項目）:
  * Material Icons: `<i class="material-icons">check_circle</i>` または
    Font Awesome: `<i class="fas fa-check-circle"></i>` + 重要ポイント（18-20px）
  * 各ポイントの簡潔な説明（16-18px）
  * 重要な数値や傾向は色やサイズで強調

### セクション4（データ詳細/表）
- セクションタイトル（24-28px）: [データ詳細]
- フィルターオプション: [データのサブセットを表示するためのボタンやタブ]
- データテーブル:
  * 見出し行は背景色で区別
  * zebra-stripingで行の視認性を向上
  * 重要なデータセルは色や太字で強調
  * 注釈や出典情報（12-14px）

### セクション5（比較分析）
- セクションタイトル（24-28px）: [比較分析タイトル]
- 比較カード（2-4枚を横並びに配置）:
  * カードタイトル（20-22px）
  * 主要数値（36-48px）
  * サブ情報（発売日、期間など）（14-16px）
  * Font Awesome: `<i class="fas fa-check-circle"></i>` または
    Material Icons: `<i class="material-icons">check_circle</i>` 付きの強み/成功点（3-4項目）
  * Font Awesome: `<i class="fas fa-exclamation-triangle"></i>` または
    Material Icons: `<i class="material-icons">warning</i>` 付きの課題/注意点（必要に応じて）
  * 総括コメント（16-18px、1-2文）

### セクション6（傾向と展望）
- セクションタイトル（24-28px）: [傾向と展望]
- サブセクション（20-22px）:
  * 成功要因と課題の対比表示
  * タイムラインや推移グラフ
  * 注目ポイントの箇条書き（Font Awesome: `<i class="fas fa-arrow-up"></i>`/`<i class="fas fa-arrow-down"></i>` または
    Material Icons: `<i class="material-icons">arrow_upward</i>`/`<i class="material-icons">arrow_downward</i>` アイコン活用）

### 最終セクション（まとめ）
- セクションタイトル（24-28px）: [まとめ/結論]
- 主要ポイントの要約（3-5項目の箇条書き）
- 今後の方向性や推奨事項（必要に応じて）
- データソースや参考情報
- 「トップに戻る」ボタン（必須）: `<button class="btn btn-primary" onclick="scrollToSection('hero')"><i class="material-icons mr-2">arrow_upward</i>トップに戻る</button>`

## 注意事項
- 上記はテンプレートであり、実際のコンテンツに応じて適切に変更してください
- セクション数や順序は必要に応じて調整可能です
- 各セクションの内容は示されたフォーマットに従いつつ、実際のデータに適した表現方法を選択してください
- 特定の業界や分野に関するデータの場合、業界固有の色やアイコンを活用してください

## デザイン指示
- **カラースキーム**:
  * プロフェッショナルな配色（メインカラー+アクセントカラー2-3色まで）
  * データ表示には色分けを効果的に活用（成功=緑、注意=オレンジ、警告=赤など）
  * コンテンツの性質や業界に応じた配色選択:
    - 金融/ビジネス: 青系統をベースに安定感と信頼性を表現
    - テクノロジー: 紫や青緑系を活用してイノベーションを表現
    - 小売/消費財: オレンジや赤系で活気と親しみやすさを表現
    - 医療/ヘルスケア: 緑や青系で信頼感と清潔感を表現
  * データカテゴリや分類には一貫した色分けを適用
- **カードベースのUI**:
  * 重要情報や統計データはカード形式で表示し、微妙な影効果を付与
  * カード間の余白は一定（16-24px）に保ち、視覚的な高級感を確保
  * カードの背景色は情報の種類や重要度に応じて調整
- **フォント**:
  * 主要テキスト: 'Noto Sans JP'（本文は16-18px）
  * 見出し/強調: 'Noto Serif JP'（セクション見出しは24-28px、サブセクションは20-22px）
  * 統計数値: 'Roboto Mono'（大きな数字は36-48px、単位は16-18px）
  * 重要統計データは大きなフォントサイズ（36-48px）で表示し、補足情報は小さく（14-16px）
  * 情報の階層に応じたフォントサイズの一貫した使い分け
- **フォントウェイト**:
  * 見出しは600または700を使用
  * 強調ポイントは500または600
  * 本文は400または500
  * 補足情報は300または400
- **グリッドシステム**:
  * 全体は12列グリッドを基本とし、セクションによって1-4列の可変レイアウト
  * カード要素は横並びで2-4枚表示し、モバイル表示では縦並びに自動調整
  * コンテンツの量と種類に応じたグリッドの柔軟な活用
- **ビジュアル要素**:
  * 各セクションにはコンテンツを象徴するアイコンを付与（Font Awesome: `<i class="fas fa-chart-bar"></i>` または
    Material Icons: `<i class="material-icons">bar_chart</i>`、
    Font Awesome: `<i class="fas fa-exchange-alt"></i>` または
    Material Icons: `<i class="material-icons">compare_arrows</i>`など）
  * データ評価にはアイコンを活用（肯定=Font Awesome: `<i class="fas fa-check-circle"></i>` または
    Material Icons: `<i class="material-icons">check_circle</i>`、
    注意=Font Awesome: `<i class="fas fa-exclamation-triangle"></i>` または
    Material Icons: `<i class="material-icons">warning</i>`、
    否定=Font Awesome: `<i class="fas fa-times-circle"></i>` または
    Material Icons: `<i class="material-icons">cancel</i>`など）
  * データ表示には内容に最適なグラフタイプを選択:
    - 時系列変化: ラインチャート
    - カテゴリ比較: バーチャート
    - 構成比: パイ/ドーナツチャート
    - 相関関係: 散布図
    - 範囲/分布: ボックスプロット
  * 情報の性質に応じた適切なビジュアライゼーション選択
- **ホワイトスペース**:
  * セクション間は48-64pxの余白を設け、明確な区切りを表現
  * 段落間は16-24pxの余白を確保
  * カード内のコンテンツ周りには16-20pxのパディングを適用
  * 情報密度に応じた余白の調整（情報が多い場合は余白を狭く、少ない場合は広く）
- **アイコン**: 以下のアイコンライブラリを戦略的に使用し、視覚的階層を強化
  * Font Awesome (6.4.0): 5,000以上の多様なベクターアイコンを提供するライブラリ。ナビゲーション要素、ソーシャルメディアアイコン、アクション表示、状態表示などに最適。`<i class="fas fa-chart-line"></i>`のような形式で使用。
  * Material Icons (1.13.14): Googleのマテリアルデザインガイドラインに沿った、シンプルで直感的なアイコンセット。UIコンポーネント、ボタン、フォーム要素などに一貫性のあるデザイン言語を提供。`<i class="material-icons">insert_chart</i>`のような形式で使用。

  **アイコン使用時の注意点**:
  * 使用前に必ずアイコン名が該当ライブラリに存在することを確認してください
  * Font Awesomeアイコン: https://fontawesome.com/v6/search で確認（例: check-circle, chart-line, warning）
  * Material Iconsアイコン: https://fonts.google.com/icons で確認（例: check_circle, bar_chart, warning）
  * 存在しないアイコン名を指定しないよう注意してください
  * アイコンが見つからない場合は類似の代替アイコンを使用するか、アイコンを省略してください

## 内容バランス調整
- **情報密度**: 1セクションあたりの情報量は対象者の専門性に応じて調整（初心者向けは3-4ポイント、専門家向けは5-7ポイントまで）
- **テキスト量**: 長文は避け、簡潔な表現で要点を伝える。段落は2-3文に抑える
- **統計データの表示**:
  * 重要な数値データは大きなフォントで強調（36-48px）し、単位や補足情報は控えめに
  * 数値の補足説明は箇条書きで3-4項目程度に抑える
  * 業界や文脈に応じて適切な数値フォーマットを使用（%, 百万/億単位, 小数点以下桁数など）
  * 複雑なデータはテーブル形式で整理し、必要に応じて色分けを行う
- **カード要素の設計**:
  * カード形式で横並びに配置（デスクトップでは2-4枚、モバイルでは縦並びに）
  * 各カードには主要数値、タイトル、日付/期間、3-4点の特徴を記載
  * 成功/肯定的ポイントには Font Awesome: `<i class="fas fa-check"></i>` または
    Material Icons: `<i class="material-icons">check</i>` マーク、
    課題/注意点には Font Awesome: `<i class="fas fa-exclamation-triangle"></i>` または
    Material Icons: `<i class="material-icons">warning</i>` マークなど視覚的指標を付与
  * 業界や分野に応じたアイコンと色分けを適用
- **視覚的バランス**:
  * スクロール型プレゼンテーションの特性を活かし、セクション間に48-64pxの「余白」を持たせる
  * 各セクションの高さは画面の0.8〜1.0倍程度を目安とし、過度に長いセクションは避ける
  * スクロール操作を考慮し、重要な情報は各セクションの上部20-30%の位置に配置
- **レイアウト最適化**:
  * データ豊富なセクションとビジュアル中心のセクションを交互に配置し、リズム感を出す
  * テキスト量が多い場合、2-3列レイアウトで横幅を活用
  * データの種類に応じた表示方法の選択（数値比較はバーチャート、時系列データはラインチャート、構成比はパイ/ドーナツチャートなど）

## Mermaid図の活用
- **適用シナリオ**: 以下のような内容はMermaid記法を使用して図表化することを検討してください:
  * プロセスフロー
  * 組織構造
  * 時系列の流れ
  * 意思決定フロー
  * 比較関係
  * システム構成
- **実装方法**:
  * Mermaidを使用した図表は以下のように実装します:
  ```html
  <div class="mermaid">
    graph TD;
      A[開始] --> B[プロセス1];
      B --> C[プロセス2];
      C --> D[終了];
  </div>
  ```
  * フローチャートの例:
  ```
  graph TD;
    A[データ収集] --> B[分析];
    B --> C[結果の解釈];
    C --> D[戦略立案];
  ```
  * シーケンス図の例:
  ```
  sequenceDiagram
    参加者A->>参加者B: リクエスト
    参加者B->>参加者C: 処理
    参加者C-->>参加者B: 結果
    参加者B-->>参加者A: レスポンス
  ```
- **スタイル指定**:
  * 図の幅は100%に設定し、レスポンシブ対応させる
  * 背景色は薄いグレー（#f9fafb）などを使用し、視認性を確保

## 技術要件
- HTML5/CSS3/JavaScriptの最新標準に準拠
- 以下のリソースを必ず使用すること:
  ```html
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/material-icons@1.13.14/iconfont/material-icons.min.css">
  ```
- 以下のフォントを使用すること:
  ```html
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;600;700&family=Noto+Serif+JP:wght@400;500;600;700&family=Roboto+Mono&display=swap">
  ```
- daisyUI 5とTailwind CSSを使用したスタイリング
- Chart.jsを使用したデータビジュアライゼーション
- Mermaidを使用したダイアグラムやフローチャートの実装
- スライド遷移効果は専門的かつ控えめなものを使用
- モバイルおよびタブレットでの表示も最適化

## 実装上の注意点
- **最適なライブラリ活用**: 各コンテンツタイプに適したライブラリ機能を選択し、最適なパフォーマンスを実現
- **UIコンポーネントのカスタマイズ**:
  * カードコンポーネントには適切な角丸（border-radius: 8-12px）と微妙な影効果を適用
  * アイコンはセクション見出しやデータポイントと一体化させ、視覚的理解を助ける
  * ポジティブ評価には Font Awesome: `<i class="fas fa-check-circle"></i>` または
    Material Icons: `<i class="material-icons">check_circle</i>`（緑色）、
    注意点には Font Awesome: `<i class="fas fa-exclamation-triangle"></i>` または
    Material Icons: `<i class="material-icons">warning</i>`（オレンジ色）を使用
  * 使用するアイコンはすべて実際にライブラリに存在することを確認し、存在しない場合は代替アイコンを使用
  * 業界/分野に応じたカラースキームを適用（例：金融=青系、テクノロジー=紫系、エネルギー=緑系など）
- **データビジュアライゼーションの最適化**:
  * Chart.jsを使用したグラフには、必要最小限のグリッドラインと軸ラベルを設定
  * 複数系列のデータには一貫した色分けを適用し、凡例を明確に表示
  * 表形式データは行ごとの背景色を交互に変え（zebra-striping）、可読性を高める
  * データの種類に応じた最適なチャートタイプを選択（時系列=ライン、カテゴリ比較=バー、構成比=パイなど）
- **レスポンシブデザインの実装**:
  * デスクトップでは横並びの2-4カードレイアウト、タブレット/モバイルでは縦並びに自動調整
  * 統計数値の表示サイズはビューポートに応じて調整（vw単位の活用）
  * テーブルデータは小画面での横スクロールを許可し、データの完全性を維持
  * 画像やグラフはモバイル表示でも見やすいサイズに調整
- **ナビゲーション機能の実装**:
  * 固定位置のプログレスバーで全体の進行状況を示す
  * セクション見出しが画面上部に達したら固定表示する「スティッキーヘッダー」機能の実装
  * コンテンツ量に応じて、セクションジャンプ用の目次や「トップへ戻る」ボタンを配置
  * 各セクション間のスクロールトランジションは滑らかにするため、CSSの scroll-behavior: smooth を活用
- **アクセシビリティの確保**:
  * 十分なコントラスト比を確保（WCAG AAレベル以上）
  * データグラフには適切な代替テキストを提供
  * アイコンには aria-label を適用して支援技術との互換性を高める
  * コンテンツの言語に応じた適切なlang属性の設定
- **パフォーマンス最適化**:
  * 画像リソースは遅延読み込み（lazy loading）を適用
  * アニメーションは必要最小限に抑え、スクロール時のパフォーマンスを確保
  * CSS変数を活用してテーマの一貫性を維持しつつメンテナンス性を向上
  * コンテンツ量に応じてリソースの読み込み順序を最適化

## スクロール処理の実装例
- スクロール処理とページ内ナビゲーションは以下のようなJavaScript関数で実装してください:
```javascript
// スクロールに応じたプログレスバーの更新
window.addEventListener('scroll', function() {
  const windowHeight = window.innerHeight;
  const documentHeight = document.documentElement.scrollHeight - windowHeight;
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  const scrollPercent = (scrollTop / documentHeight) * 100;

  document.getElementById('progress-bar').style.width = scrollPercent + '%';

  // 現在の表示セクションに応じて目次のハイライトを更新
  const sections = document.querySelectorAll('section');
  const tocItems = document.querySelectorAll('.toc-item');

  sections.forEach((section, index) => {
    const sectionTop = section.offsetTop;
    const sectionHeight = section.offsetHeight;

    if (scrollTop >= (sectionTop - windowHeight / 3) && scrollTop < (sectionTop + sectionHeight - windowHeight / 3)) {
      tocItems.forEach(item => item.classList.remove('active'));
      tocItems[index].classList.add('active');
    }
  });
});

// セクションへのスクロール関数
function scrollToSection(sectionId) {
  const section = document.getElementById(sectionId);
  window.scrollTo({
    top: section.offsetTop,
    behavior: 'smooth'
  });
}

// 目次クリック時のスクロール処理
document.querySelectorAll('.toc-item').forEach((item, index) => {
  item.addEventListener('click', function() {
    const sectionId = this.getAttribute('data-section');
    scrollToSection(sectionId);
  });
});
```
---

# daisyUI 5
daisyUI 5 is a CSS library for Tailwind CSS 4
daisyUI 5 provides class names for common UI components

- [daisyUI 5 docs](http://daisyui.com)
- [Guide: How to use this file in LLMs and code editors](https://daisyui.com/docs/editor/)
- [daisyUI 5 release notes](https://daisyui.com/docs/v5/)
- [daisyUI 4 to 5 upgrade guide](https://daisyui.com/docs/upgrade/)

## daisyUI 5 install notes
[install guide](https://daisyui.com/docs/install/)
1. daisyUI 5 requires Tailwind CSS 4
2. `tailwind.config.js` file is deprecated in Tailwind CSS v4. do not use `tailwind.config.js`. Tailwind CSS v4 only needs `@import "tailwindcss";` in the CSS file if it's a node dependency.
3. daisyUI 5 can be installed using `npm i -D daisyui@latest` and then adding `@plugin "daisyui";` to the CSS file
4. daisyUI is suggested to be installed as a dependency but if you really want to use it from CDN, you can use Tailwind CSS and daisyUI CDN files:
```html
<link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css" />
<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
```
5. A CSS file with Tailwind CSS and daisyUI looks like this (if it's a node dependency)
```css
@import "tailwindcss";
@plugin "daisyui";
```

## daisyUI 5 usage rules
1. We can give styles to a HTML element by adding daisyUI class names to it. By adding a component class name, part class names (if there's any available for that component), and modifier class names (if there's any available for that component)
2. Components can be customized using Tailwind CSS utility classes if the customization is not possible using the existing daisyUI classes. For example `btn px-10` sets a custom horizontal padding to a `btn`
3. If customization of daisyUI styles using Tailwind CSS utility classes didn't work because of CSS specificity issues, you can use the `!` at the end of the Tailwind CSS utility class to override the existing styles. For example `btn bg-red-500!` sets a custom background color to a `btn` forcefully. This is a last resort solution and should be used sparingly
4. If a specific component or something similar to it doesn't exist in daisyUI, you can create your own component using Tailwind CSS utility
5. when using Tailwind CSS `flex` and `grid` for layout, it should be responsive using Tailwind CSS responsive utility prefixes.
6. Only allowed class names are existing daisyUI class names or Tailwind CSS utility classes.
7. Ideally, you won't need to write any custom CSS. Using daisyUI class names or Tailwind CSS utility classes is preferred.
8. suggested - if you need placeholder images, use https://picsum.photos/200/300 with the size you want
9. suggested - when designing , don't add a custom font unless it's necessary
10. don't add `bg-base-100 text-base-content` to body unless it's necessary
11. For design decisions, use Refactoring UI book best practices

daisyUI 5 class names are one of the following categories. these type names are only for reference and are not used in the actual code
- `component`: the required component class
- `part`: a child part of a component
- `style`: sets a specific style to component or part
- `behavior`: changes the behavior of component or part
- `color`: sets a specific color to component or part
- `size`: sets a specific size to component or part
- `placement`: sets a specific placement to component or part
- `direction`: sets a specific direction to component or part
- `modifier`: modifies the component or part in a specific way

## Config
daisyUI 5 config docs: https://daisyui.com/docs/config/
daisyUI without config:
```css
@plugin "daisyui";
```
daisyUI config with `light` theme only:
```css
@plugin "daisyui" {
  themes: light --default;
}
```
daisyUI with all the default configs:
```css
@plugin "daisyui" {
  themes: light --default, dark --prefersdark;
  root: ":root";
  include: ;
  exclude: ;
  prefix: ;
  logs: true;
}
```
An example config:
In below config, all the built-in themes are enabled while bumblebee is the default theme and synthwave is the prefersdark theme (default dark mode)
All the other themes are enabled and can be used by adding `data-theme="THEME_NAME"` to the `<html>` element
root scrollbar gutter is excluded. `daisy-` prefix is used for all daisyUI classes and console.log is disabled
```css
@plugin "daisyui" {
  themes: light, dark, cupcake, bumblebee --default, emerald, corporate, synthwave --prefersdark, retro, cyberpunk, valentine, halloween, garden, forest, aqua, lofi, pastel, fantasy, wireframe, black, luxury, dracula, cmyk, autumn, business, acid, lemonade, night, coffee, winter, dim, nord, sunset, caramellatte, abyss, silk;
  root: ":root";
  include: ;
  exclude: rootscrollgutter, checkbox;
  prefix: daisy-;
  logs: false;
}
```
## daisyUI 5 colors

### daisyUI color names
- `primary`: Primary brand color, The main color of your brand
- `primary-content`: Foreground content color to use on primary color
- `secondary`: Secondary brand color, The optional, secondary color of your brand
- `secondary-content`: Foreground content color to use on secondary color
- `accent`: Accent brand color, The optional, accent color of your brand
- `accent-content`: Foreground content color to use on accent color
- `neutral`: Neutral dark color, For not-saturated parts of UI
- `neutral-content`: Foreground content color to use on neutral color
- `base-100`:-100 Base surface color of page, used for blank backgrounds
- `base-200`:-200 Base color, darker shade, to create elevations
- `base-300`:-300 Base color, even more darker shade, to create elevations
- `base-content`: Foreground content color to use on base color
- `info`: Info color, For informative/helpful messages
- `info-content`: Foreground content color to use on info color
- `success`: Success color, For success/safe messages
- `success-content`: Foreground content color to use on success color
- `warning`: Warning color, For warning/caution messages
- `warning-content`: Foreground content color to use on warning color
- `error`: Error color, For error/danger/destructive messages
- `error-content`: Foreground content color to use on error color

### daisyUI color rules
1. daisyUI adds semantic color names to Tailwind CSS colors
2. daisyUI color names can be used in utility classes, like other Tailwind CSS color names. for example, `bg-primary` will use the primary color for the background
3. daisyUI color names include variables as value so they can change based the theme
4. There's no need to use `dark:` for daisyUI color names
5. Ideally only daisyUI color names should be used for colors so the colors can change automatically based on the theme
6. If a Tailwind CSS color name (like `red-500`) is used, it will be same red color on all themes
7. If a daisyUI color name (like `primary`) is used, it will change color based on the theme
8. Using Tailwind CSS color names for text colors should be avoided because Tailwind CSS color `text-gray-800` on `bg-base-100` would be unreadable on a dark theme - because on dark theme, `bg-base-100` is a dark color
9. `*-content` colors should have a good contrast compared to their associated colors
10. suggestion - when designing a page use `base-*` colors for majority of the page. use `primary` color for important elements

### daisyUI custom theme with custom colors
A CSS file with Tailwind CSS, daisyUI and a custom daisyUI theme looks like this:
```css
@import "tailwindcss";
@plugin "daisyui";
@plugin "daisyui/theme" {
  name: "mytheme";
  default: true; /* set as default */
  prefersdark: false; /* set as default dark mode (prefers-color-scheme:dark) */
  color-scheme: light; /* color of browser-provided UI */

  --color-base-100: oklch(98% 0.02 240);
  --color-base-200: oklch(95% 0.03 240);
  --color-base-300: oklch(92% 0.04 240);
  --color-base-content: oklch(20% 0.05 240);
  --color-primary: oklch(55% 0.3 240);
  --color-primary-content: oklch(98% 0.01 240);
  --color-secondary: oklch(70% 0.25 200);
  --color-secondary-content: oklch(98% 0.01 200);
  --color-accent: oklch(65% 0.25 160);
  --color-accent-content: oklch(98% 0.01 160);
  --color-neutral: oklch(50% 0.05 240);
  --color-neutral-content: oklch(98% 0.01 240);
  --color-info: oklch(70% 0.2 220);
  --color-info-content: oklch(98% 0.01 220);
  --color-success: oklch(65% 0.25 140);
  --color-success-content: oklch(98% 0.01 140);
  --color-warning: oklch(80% 0.25 80);
  --color-warning-content: oklch(20% 0.05 80);
  --color-error: oklch(65% 0.3 30);
  --color-error-content: oklch(98% 0.01 30);

  --radius-selector: 1rem; /* border radius of selectors (checkbox, toggle, badge) */
  --radius-field: 0.25rem; /* border radius of fields (button, input, select, tab) */
  --radius-box: 0.5rem; /* border radius of boxes (card, modal, alert) */

  --size-selector: 0.25rem; /* base size of selectors (checkbox, toggle, badge) */
  --size-field: 0.25rem; /* base size of fields (button, input, select, tab) */

  --border: 1px; /* border size */

  --depth: 1; /* only 0 or 1 – Adds a shadow and subtle 3D effect to components */
  --noise: 0; /* only 0 or 1 - Adds a subtle noise effect to components */
}
```
#### Rules
- All CSS variables above are required
- Colors can be OKLCH or hex or other formats

You can use https://daisyui.com/theme-generator/ to create your own theme

## daisyUI 5 components

### accordion
Accordion is used for showing and hiding content but only one item can stay open at a time

[accordion docs](https://daisyui.com/components/accordion/)

#### Class names
- component: `collapse`
- part: `collapse-title`, `collapse-content`
- modifier: `collapse-arrow`, `collapse-plus`, `collapse-open`, `collapse-close`

#### Syntax
```html
<div class="collapse {MODIFIER}">{CONTENT}</div>
```
where content is:
```html
<input type="radio" name="{name}" checked="{checked}" />
<div class="collapse-title">{title}</div>
<div class="collapse-content">{CONTENT}</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier class names
- Accordion uses radio inputs. All radio inputs with the same name work together and only one of them can be open at a time
- If you have more than one set of accordion items on a page, use different names for the radio inputs on each set
- Replace {name} with a unique name for the accordion group
- replace `{checked}` with `checked="checked"` if you want the accordion to be open by default

### alert
Alert informs users about important events

[alert docs](https://daisyui.com/components/alert/)

#### Class names
- component: `alert`
- style: `alert-outline`, `alert-dash`, `alert-soft`
- color: `alert-info`, `alert-success`, `alert-warning`, `alert-error`
- direction: `alert-vertical`, `alert-horizontal`

#### Syntax
```html
<div role="alert" class="alert {MODIFIER}">{CONTENT}</div>
```

#### Rules
- {MODIFIER} is optional and can have one of each style/color/direction class names
- Add `sm:alert-horizontal` for responsive layouts

### avatar
Avatars are used to show a thumbnail

[avatar docs](https://daisyui.com/components/avatar/)

#### Class names
- component: `avatar`, `avatar-group`
- modifier: `avatar-online`, `avatar-offline`, `avatar-placeholder`

#### Syntax
```html
<div class="avatar {MODIFIER}">
  <div>
    <img src="{image-url}" />
  </div>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier class names
- Use `avatar-group` for containing multiple avatars
- You can set custom sizes using `w-*` and `h-*`
- You can use mask classes such as `mask-squircle`, `mask-hexagon`, `mask-triangle`

### badge
Badges are used to inform the user of the status of specific data

[badge docs](https://daisyui.com/components/badge/)

#### Class names
- component: `badge`
- style: `badge-outline`, `badge-dash`, `badge-soft`, `badge-ghost`
- color: `badge-neutral`, `badge-primary`, `badge-secondary`, `badge-accent`, `badge-info`, `badge-success`, `badge-warning`, `badge-error`
- size: `badge-xs`, `badge-sm`, `badge-md`, `badge-lg`, `badge-xl`

#### Syntax
```html
<span class="badge {MODIFIER}">Badge</span>
```

#### Rules
- {MODIFIER} is optional and can have one of each style/color/size class names
- Can be used inside text or buttons
- To create an empty badge, just remove the text between the span tags

### breadcrumbs
Breadcrumbs helps users to navigate

[breadcrumbs docs](https://daisyui.com/components/breadcrumbs/)

#### Class names
- component: `breadcrumbs`

#### Syntax
```html
<div class="breadcrumbs">
  <ul><li><a>Link</a></li></ul>
</div>
```

#### Rules
- breadcrumbs only has one main class name
- Can contain icons inside the links
- If you set `max-width` or the list gets larger than the container it will scroll

### button
Buttons allow the user to take actions

[button docs](https://daisyui.com/components/button/)

#### Class names
- component: `btn`
- color: `btn-neutral`, `btn-primary`, `btn-secondary`, `btn-accent`, `btn-info`, `btn-success`, `btn-warning`, `btn-error`
- style: `btn-outline`, `btn-dash`, `btn-soft`, `btn-ghost`, `btn-link`
- behavior: `btn-active`, `btn-disabled`
- size: `btn-xs`, `btn-sm`, `btn-md`, `btn-lg`, `btn-xl`
- modifier: `btn-wide`, `btn-block`, `btn-square`, `btn-circle`

#### Syntax
```html
<button class="btn {MODIFIER}">Button</button>
```
#### Rules
- {MODIFIER} is optional and can have one of each color/style/behavior/size/modifier class names
- btn can be used on any html tags such as `<button>`, `<a>`, `<input>`
- btn can have an icon before or after the text
- set `tabindex="-1" role="button" aria-disabled="true"` if you want to disable the button using a class name

### calendar
Calendar includes styles for different calendar libraries

[calendar docs](https://daisyui.com/components/calendar/)

#### Class names
- component
  - `cally (for Cally web component)`
  - `pika-single (for the input field that opens Pikaday calendar)`
  - `react-day-picker (for the DayPicker component)`

#### Syntax
For Cally:
```html
<calendar-date class="cally">{CONTENT}</calendar-date>
```
For Pikaday:
```html
<input type="text" class="input pika-single">
```
For React Day Picker:
```html
<DayPicker className="react-day-picker">
```

#### Rules
- daisyUI supports Cally, Pikaday, React Day Picker

### card
Cards are used to group and display content

[card docs](https://daisyui.com/components/card/)

#### Class names
- component: `card`
- part: `card-title`, `card-body`, `card-actions`
- style: `card-border`, `card-dash`
- modifier: `card-side`, `image-full`
- size: `card-xs`, `card-sm`, `card-md`, `card-lg`, `card-xl`

#### Syntax
```html
<div class="card {MODIFIER}">
  <figure><img src="{image-url}" alt="{alt-text}" /></figure>
  <div class="card-body">
    <h2 class="card-title">{title}</h2>
    <p>{CONTENT}</p>
    <div class="card-actions">{actions}</div>
  </div>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier class names and one of the size class names
- `<figure>` and `<div class="card-body">` are optional
- can use `sm:card-horizontal` for responsive layouts
- If image is placed after `card-body`, the image will be placed at the bottom

### carousel
Carousel show images or content in a scrollable area

[carousel docs](https://daisyui.com/components/carousel/)

#### Class names
- component: `carousel`
- part: `carousel-item`
- modifier: `carousel-start`, `carousel-center`, `carousel-end`
- direction: `carousel-horizontal`, `carousel-vertical`

#### Syntax
```html
<div class="carousel {MODIFIER}">{CONTENT}</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/direction class names
- Content is a list of `carousel-item` divs: `<div class="carousel-item"></div>`
- To create a full-width carousel, add `w-full` to each carousel item

### chat
Chat bubbles are used to show one line of conversation and all its data, including the author image, author name, time, etc

[chat docs](https://daisyui.com/components/chat/)

#### Class names
- component: `chat`
- part: `chat-image`, `chat-header`, `chat-footer`, `chat-bubble`
- placement: `chat-start`, `chat-end`
- color: `chat-bubble-neutral`, `chat-bubble-primary`, `chat-bubble-secondary`, `chat-bubble-accent`, `chat-bubble-info`, `chat-bubble-success`, `chat-bubble-warning`, `chat-bubble-error`

#### Syntax
```html
<div class="chat {PLACEMENT}">
  <div class="chat-image"></div>
  <div class="chat-header"></div>
  <div class="chat-bubble {COLOR}">Message text</div>
  <div class="chat-footer"></div>
</div>
```

#### Rules
- {PLACEMENT} is required and must be either `chat-start` or `chat-end`
- {COLOR} is optional and can have one of the color class names
- To add an avatar, use `<div class="chat-image avatar">` and nest the avatar content inside

### checkbox
Checkboxes are used to select or deselect a value

[checkbox docs](https://daisyui.com/components/checkbox/)

#### Class names
- component: `checkbox`
- color: `checkbox-primary`, `checkbox-secondary`, `checkbox-accent`, `checkbox-neutral`, `checkbox-success`, `checkbox-warning`, `checkbox-info`, `checkbox-error`
- size: `checkbox-xs`, `checkbox-sm`, `checkbox-md`, `checkbox-lg`, `checkbox-xl`

#### Syntax
```html
<input type="checkbox" class="checkbox {MODIFIER}" />
```

#### Rules
- {MODIFIER} is optional and can have one of each color/size class names

### collapse
Collapse is used for showing and hiding content

[collapse docs](https://daisyui.com/components/collapse/)

#### Class names
- component: `collapse`
- part: `collapse-title`, `collapse-content`
- modifier: `collapse-arrow`, `collapse-plus`, `collapse-open`, `collapse-close`

#### Syntax
```html
<div tabindex="0" class="collapse {MODIFIER}">
  <div class="collapse-title">{title}</div>
  <div class="collapse-content">{CONTENT}</div>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier class names
- instead of `tabindex="0"`, you can use  `<input type="checkbox">` as a first child
- Can also be a details/summary tag

### countdown
Countdown gives you a transition effect when you change a number between 0 to 99

[countdown docs](https://daisyui.com/components/countdown/)

#### Class names
- component: `countdown`

#### Syntax
```html
<span class="countdown">
  <span style="--value:{number};">number</span>
</span>
```

#### Rules
- The `--value` CSS variable and text must be a number between 0 and 99
- you need to change the span text and the `--value` CSS variable using JS
- you need to add `aria-live="polite"` and `aria-label="{number}"` so screen readers can properly read changes

### diff
Diff component shows a side-by-side comparison of two items

[diff docs](https://daisyui.com/components/diff/)

#### Class names
- component: `diff`
- part: `diff-item-1`, `diff-item-2`, `diff-resizer`

#### Syntax
```html
<figure class="diff">
  <div class="diff-item-1">{item1}</div>
  <div class="diff-item-2">{item2}</div>
  <div class="diff-resizer"></div>
</figure>
```

#### Rules
- To maintain aspect ratio, add `aspect-16/9` or other aspect ratio classes to `<figure class="diff">` element

### divider
Divider will be used to separate content vertically or horizontally

[divider docs](https://daisyui.com/components/divider/)

#### Class names
- component: `divider`
- color: `divider-neutral`, `divider-primary`, `divider-secondary`, `divider-accent`, `divider-success`, `divider-warning`, `divider-info`, `divider-error`
- direction: `divider-vertical`, `divider-horizontal`
- placement: `divider-start`, `divider-end`

#### Syntax
```html
<div class="divider {MODIFIER}">{text}</div>
```

#### Rules
- {MODIFIER} is optional and can have one of each direction/color/placement class names
- Omit text for a blank divider

### dock
Dock (also know as Bottom navigation or Bottom bar) is a UI element that provides navigation options to the user. Dock sticks to the bottom of the screen

[dock docs](https://daisyui.com/components/dock/)

#### Class names
- component: `dock`
- part: `dock-label`
- modifier: `dock-active`
- size: `dock-xs`, `dock-sm`, `dock-md`, `dock-lg`, `dock-xl`

#### Syntax
```html
<div class="dock {MODIFIER}">{CONTENT}</div>
```
where content is a list of buttons:
```html
<button>
    <svg>{icon}</svg>
    <span class="dock-label">Text</span>
</button>
```

#### Rules
- {MODIFIER} is optional and can have one of the size class names
- To make a button active, add `dock-active` class to the button
- add `<meta name="viewport" content="viewport-fit=cover">` is required for responsivness of the dock in iOS

### drawer
Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page

[drawer docs](https://daisyui.com/components/drawer/)

#### Class names
- component: `drawer`
- part: `drawer-toggle`, `drawer-content`, `drawer-side`, `drawer-overlay`
- placement: `drawer-end`
- modifier: `drawer-open`

#### Syntax
```html
<div class="drawer {MODIFIER}">
  <input id="my-drawer" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content">{CONTENT}</div>
  <div class="drawer-side">{SIDEBAR}</div>
</div>
```
where {CONTENT} can be navbar, site content, footer, etc
and {SIDEBAR} can be a menu like:
```html
<ul class="menu p-4 w-80 min-h-full bg-base-100 text-base-content">
  <li><a>Item 1</a></li>
  <li><a>Item 2</a></li>
</ul>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/placement class names
- `id` is required for the `drawer-toggle` input. change `my-drawer` to a unique id according to your needs
- `lg:drawer-open` can be used to make sidebar visible on larger screens
- `drawer-toggle` is a hidden checkbox. Use label with "for" attribute to toggle state
- if you want to open the drawer when a button is clicked, use `<label for="my-drawer" class="btn drawer-button">Open drawer</label>` where `my-drawer` is the id of the `drawer-toggle` input
- when using drawer, every page content must be inside `drawer-content` element. for example navbar, footer, etc should not be outside of `drawer`

### dropdown
Dropdown can open a menu or any other element when the button is clicked

[dropdown docs](https://daisyui.com/components/dropdown/)

#### Class names
- component: `dropdown`
- part: `dropdown-content`
- placement: `dropdown-start`, `dropdown-center`, `dropdown-end`, `dropdown-top`, `dropdown-bottom`, `dropdown-left`, `dropdown-right`
- modifier: `dropdown-hover`, `dropdown-open`

#### Syntax
Using details and summary
```html
<details class="dropdown">
  <summary>Button</summary>
  <ul class="dropdown-content">{CONTENT}</ul>
</details>
```

Using popover API
```html
<button popovertarget="{id}" style="anchor-name:--{anchor}">{button}</button>
<ul class="dropdown-content" popover id="{id}" style="position-anchor:--{anchor}">{CONTENT}</ul>
```

Using CSS focus
```html
<div class="dropdown">
  <div tabindex="0" role="button">Button</div>
  <ul tabindex="0" class="dropdown-content">{CONTENT}</ul>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/placement class names
- replace `{id}` and `{anchor}` with a unique name
- For CSS focus dropdowns, use `tabindex="0"` and `role="button"` on the button
- The content can be any HTML element (not just `<ul>`)

### fieldset
Fieldset is a container for grouping related form elements. It includes fieldset-legend as a title and label as a description

[fieldset docs](https://daisyui.com/components/fieldset/)

#### Class names
- Component: `fieldset`, `label`
- Parts: `fieldset-legend`

#### Syntax
```html
<fieldset class="fieldset">
  <legend class="fieldset-legend">{title}</legend>
  {CONTENT}
  <p class="label">{description}</p>
</fieldset>
```

#### Rules
- You can use any element as a direct child of fieldset to add form elements

### file-input
File Input is a an input field for uploading files

[file-input docs](https://daisyui.com/components/file-input/)

#### Class Names:
- Component: `file-input`
- Style: `file-input-ghost`
- Color: `file-input-neutral`, `file-input-primary`, `file-input-secondary`, `file-input-accent`, `file-input-info`, `file-input-success`, `file-input-warning`, `file-input-error`
- Size: `file-input-xs`, `file-input-sm`, `file-input-md`, `file-input-lg`, `file-input-xl`

#### Syntax
```html
<input type="file" class="file-input {MODIFIER}" />
```

#### Rules
- {MODIFIER} is optional and can have one of each style/color/size class names

### filter
Filter is a group of radio buttons. Choosing one of the options will hide the others and shows a reset button next to the chosen option

[filter docs](https://daisyui.com/components/filter/)

#### Class names
- component: `filter`
- part: `filter-reset`

#### Syntax
Using HTML form
```html
<form class="filter">
  <input class="btn btn-square" type="reset" value="×"/>
  <input class="btn" type="radio" name="{NAME}" aria-label="Tab 1 title"/>
  <input class="btn" type="radio" name="{NAME}" aria-label="Tab 2 title"/>
</form>
```
Without HTML form
```html
<div class="filter">
  <input class="btn filter-reset" type="radio" name="{NAME}" aria-label="×"/>
  <input class="btn" type="radio" name="{NAME}" aria-label="Tab 1 title"/>
  <input class="btn" type="radio" name="{NAME}" aria-label="Tab 2 title"/>
</div>
```

#### Rules
- replace `{NAME}` with proper value, according to the context of the filter
- Each set of radio inputs must have unique `name` attributes to avoid conflicts
- Use `<form>` tag when possible and only use `<div>` if you can't use a HTML form for some reason
- Use `filter-reset` class for the reset button

### footer
Footer can contain logo, copyright notice, and links to other pages

[footer docs](https://daisyui.com/components/footer/)

#### Class names
- component: `footer`
- part: `footer-title`
- placement: `footer-center`
- direction: `footer-horizontal`, `footer-vertical`

#### Syntax
```html
<footer class="footer {MODIFIER}">{CONTENT}</footer>
```
where content can contain several `<nav>` tags with `footer-title` and links inside

#### Rules
- {MODIFIER} is optional and can have one of each placement/direction class names
- try to use `sm:footer-horizontal` to make footer responsive
- suggestion - use `base-200` for background color

### hero
Hero is a component for displaying a large box or image with a title and description

[hero docs](https://daisyui.com/components/hero/)

#### Class names
- component: `hero`
- part: `hero-content`, `hero-overlay`

#### Syntax
```html
<div class="hero {MODIFIER}">{CONTENT}</div>
```

#### Rules
- {MODIFIER} is optional
- Use `hero-content` for the text content
- Use `hero-overlay` inside the hero to overlay the background image with a color
- Content can contain a figure

### indicator
Indicators are used to place an element on the corner of another element

[indicator docs](https://daisyui.com/components/indicator/)

#### Class names
- component: `indicator`
- part: `indicator-item`
- placement: `indicator-start`, `indicator-center`, `indicator-end`, `indicator-top`, `indicator-middle`, `indicator-bottom`

#### Syntax
```html
<div class="indicator">
  <span class="indicator-item">{indicator content}</span>
  <div>{main content}</div>
</div>
```

#### Rules
- Add all indicator elements (with `indicator-item` class) before the main content
- {placement} is optional and can have one of each horizontal/vertical class names. default is `indicator-end indicator-top`

### input
Text Input is a simple input field

[input docs](https://daisyui.com/components/input/)

#### Class names
- component: `input`
- style: `input-ghost`
- color: `input-neutral`, `input-primary`, `input-secondary`, `input-accent`, `input-info`, `input-success`, `input-warning`, `input-error`
- size: `input-xs`, `input-sm`, `input-md`, `input-lg`, `input-xl`

#### Syntax
```html
<input type="{type}" placeholder="Type here" class="input {MODIFIER}" />
```

#### Rules
- {MODIFIER} is optional and can have one of each style/color/size class names
- Can be used with any input field type (text, password, email, etc.)
- Use `input` class for the parent when you have more than one element inside input

### join
Join is a container for grouping multiple items, it can be used to group buttons, inputs, etc. Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items

[join docs](https://daisyui.com/components/join/)

#### Class names
- component: `join`, `join-item`
- direction: `join-vertical`, `join-horizontal`

#### Syntax
```html
<div class="join {MODIFIER}">{CONTENT}</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the direction class names
- Any direct child of the join element will get joined together
- Any element with `join-item` will be affected
- Use `lg:join-horizontal` for responsive layouts

### kbd
Kbd is used to display keyboard shortcuts

[kbd docs](https://daisyui.com/components/kbd/)

#### Class names
- component: `kbd`
- size: `kbd-xs`, `kbd-sm`, `kbd-md`, `kbd-lg`, `kbd-xl`

#### Syntax
```html
<kbd class="kbd {MODIFIER}">K</kbd>
```

#### Rules
- {MODIFIER} is optional and can have one of the size class names

### label
Label is used to provide a name or title for an input field. Label can be placed before or after the field

[label docs](https://daisyui.com/components/label/)

#### Class names
- component: `label`, `floating-label`

#### Syntax
For regular label:
```html
<label class="input">
  <span class="label">{label text}</span>
  <input type="text" placeholder="Type here" />
</label>
```
For floating label:
```html
<label class="floating-label">
  <input type="text" placeholder="Type here" class="input" />
  <span>{label text}</span>
</label>
```

#### Rules
- The `input` class is for styling the parent element which contains the input field and label, so the label does not have the 'input' class
- Use `floating-label` for the parent of an input field and a span that floats above the input field when the field is focused

### link
Link adds the missing underline style to links

[link docs](https://daisyui.com/components/link/)

#### Class names
- component: `link`
- style: `link-hover`
- color: `link-neutral`, `link-primary`, `link-secondary`, `link-accent`, `link-success`, `link-info`, `link-warning`, `link-error`

#### Syntax
```html
<a class="link {MODIFIER}">Click me</a>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier class names

### list
List is a vertical layout to display information in rows

[list docs](https://daisyui.com/components/list/)

#### Class Names:
- Component: `list`, `list-row`
- Modifier: `list-col-wrap`, `list-col-grow`

#### Syntax
```html
<ul class="list">
  <li class="list-row">{CONTENT}</li>
</ul>
```

#### Rules
- Use `list-row` for each item inside the list
- By default, the second child of the `list-row` will fill the remaining space. You can use `list-col-grow` on another child to make it fill the remaining space instead
- Use `list-col-wrap` to force an item to wrap to the next line

### loading
Loading shows an animation to indicate that something is loading

[loading docs](https://daisyui.com/components/loading/)

#### Class names
- component: `loading`
- style: `loading-spinner`, `loading-dots`, `loading-ring`, `loading-ball`, `loading-bars`, `loading-infinity`
- size: `loading-xs`, `loading-sm`, `loading-md`, `loading-lg`, `loading-xl`

#### Syntax
```html
<span class="loading {MODIFIER}"></span>
```

#### Rules
- {MODIFIER} is optional and can have one of the style/size class names

### mask
Mask crops the content of the element to common shapes

[mask docs](https://daisyui.com/components/mask/)

#### Class names
- component: `mask`
- style: `mask-squircle`, `mask-heart`, `mask-hexagon`, `mask-hexagon-2`, `mask-decagon`, `mask-pentagon`, `mask-diamond`, `mask-square`, `mask-circle`, `mask-star`, `mask-star-2`, `mask-triangle`, `mask-triangle-2`, `mask-triangle-3`, `mask-triangle-4`
- modifier: `mask-half-1`, `mask-half-2`

#### Syntax
```html
<img class="mask {MODIFIER}" src="{image-url}" />
```

#### Rules
- {MODIFIER} is required and can have one of the style/modifier class names
- You can change the shape of any element using `mask` class names
- You can set custom sizes using `w-*` and `h-*`

### menu
Menu is used to display a list of links vertically or horizontally

[menu docs](https://daisyui.com/components/menu/)

#### Class names
- component: `menu`
- part: `menu-title`, `menu-dropdown`, `menu-dropdown-toggle`
- modifier: `menu-disabled`, `menu-active`, `menu-focus`, `menu-dropdown-show`
- size: `menu-xs`, `menu-sm`, `menu-md`, `menu-lg`, `menu-xl`
- direction: `menu-vertical`, `menu-horizontal`

#### Syntax
Vertical menu:
```html
<ul class="menu">
  <li><button>Item</button></li>
</ul>
```
Horizontal menu:
```html
<ul class="menu menu-horizontal">
  <li><button>Item</button></li>
</ul>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/size/direction class names
- Use `lg:menu-horizontal` for responsive layouts
- Use `menu-title` for list item title
- Use `<details>` tag to make submenus collapsible
- Use `menu-dropdown` and `menu-dropdown-toggle` to toggle the dropdown using JS

### mockup-browser
Browser mockup shows a box that looks like a browser window

[mockup-browser docs](https://daisyui.com/components/mockup-browser/)

#### Class names
- component: `mockup-browser`
- part: `mockup-browser-toolbar`

#### Syntax
```html
<div class="mockup-browser">
  <div class="mockup-browser-toolbar">
    {toolbar content}
  </div>
  <div>{CONTENT}</div>
</div>
```

#### Rules
- For a default mockup, use just `mockup-browser` class name
- To set a URL in toolbar, add a div with `input` class

### mockup-code
Code mockup is used to show a block of code in a box that looks like a code editor

[mockup-code docs](https://daisyui.com/components/mockup-code/)

#### Class names
- component: `mockup-code`

#### Syntax
```html
<div class="mockup-code">
  <pre data-prefix="$"><code>npm i daisyui</code></pre>
</div>
```

#### Rules
- Use `<pre data-prefix="{prefix}">` to show a prefix before each line
- Use `<code>` tag to add code syntax highlighting (requires additional library)
- To highlight a line, add background/text color

### mockup-phone
Phone mockup shows a mockup of an iPhone

[mockup-phone docs](https://daisyui.com/components/mockup-phone/)

#### Class names
- component: `mockup-phone`
- part: `mockup-phone-camera`, `mockup-phone-display`

#### Syntax
```html
<div class="mockup-phone">
  <div class="mockup-phone-camera"></div>
  <div class="mockup-phone-display">{CONTENT}</div>
</div>
```

#### Rules
- Inside `mockup-phone-display` you can add anything

### mockup-window
Window mockup shows a box that looks like an operating system window

[mockup-window docs](https://daisyui.com/components/mockup-window/)

#### Class names
- component: `mockup-window`

#### Syntax
```html
<div class="mockup-window">
  <div>{CONTENT}</div>
</div>
```

### modal
Modal is used to show a dialog or a box when you click a button

[modal docs](https://daisyui.com/components/modal/)

#### Class names
- component: `modal`
- part: `modal-box`, `modal-action`, `modal-backdrop`, `modal-toggle`
- modifier: `modal-open`
- placement: `modal-top`, `modal-middle`, `modal-bottom`, `modal-start`, `modal-end`

#### Syntax
Using HTML dialog element
```html
<button onclick="my_modal.showModal()">Open modal</button>
<dialog id="my_modal" class="modal">
  <div class="modal-box">{CONTENT}</div>
  <form method="dialog" class="modal-backdrop"><button>close</button></form>
</dialog>
```

Using checkbox (legacy)
```html
<label for="my-modal" class="btn">Open modal</label>
<input type="checkbox" id="my-modal" class="modal-toggle" />
<div class="modal">
  <div class="modal-box">{CONTENT}</div>
  <label class="modal-backdrop" for="my-modal">Close</label>
</div>
```

Using anchor links (legacy)
```html
<a href="#my-modal" class="btn">Open modal</a>
<div class="modal" id="my-modal">
  <div class="modal-box">{CONTENT}</div>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/placement class names
- Add `tabindex="0"` to make modal focusable
- Use unique IDs for each modal
- For HTML dialog element modals, add `<form method="dialog">` for closing the modal with submit

### navbar
Navbar is used to show a navigation bar on the top of the page

[navbar docs](https://daisyui.com/components/navbar/)

#### Class names
- component: `navbar`
- part: `navbar-start`, `navbar-center`, `navbar-end`

#### Syntax
```html
<div class="navbar">{CONTENT}</div>
```

#### Rules
- use `navbar-start`, `navbar-center`, `navbar-end` to position content horizontally
- put anything inside each section
- suggestion - use `base-200` for background color

### pagination
Pagination is a group of buttons

[pagination docs](https://daisyui.com/components/pagination/)

#### Class names
- component: `join`
- part: `join-item`
- direction: `join-vertical`, `join-horizontal`

#### Syntax
```html
<div class="join">{CONTENT}</div>
```

#### Rules
- Use `join-item` for each button or link inside the pagination
- Use `btn` class for styling pagination items

### progress
Progress bar can be used to show the progress of a task or to show the passing of time

[progress docs](https://daisyui.com/components/progress/)

#### Class names
- component: `progress`
- color: `progress-neutral`, `progress-primary`, `progress-secondary`, `progress-accent`, `progress-info`, `progress-success`, `progress-warning`, `progress-error`

#### Syntax
```html
<progress class="progress {MODIFIER}" value="50" max="100"></progress>
```

#### Rules
- {MODIFIER} is optional and can have one of the color class names
- You must specify value and max attributes

### radial-progress
Radial progress can be used to show the progress of a task or to show the passing of time

[radial-progress docs](https://daisyui.com/components/radial-progress/)

#### Class names
- component: `radial-progress`

#### Syntax
```html
<div class="radial-progress" style="--value:70;" aria-valuenow="70" role="progressbar">70%</div>
```

#### Rules
- The `--value` CSS variable and text must be a number between 0 and 100
- you need to add `aria-valuenow="{value}"`, `aria-valuenow={value}` so screen readers can properly read value and also show that its a progress element to them
- Use `div` instead of progress because browsers can't show text inside progress tag
- Use `--size` for setting size (default 5rem) and `--thickness` to set how thick the indicator is

### radio
Radio buttons allow the user to select one option

[radio docs](https://daisyui.com/components/radio/)

#### Class names
- component: `radio`
- color: `radio-neutral`, `radio-primary`, `radio-secondary`, `radio-accent`, `radio-success`, `radio-warning`, `radio-info`, `radio-error`
- size: `radio-xs`, `radio-sm`, `radio-md`, `radio-lg`, `radio-xl`

#### Syntax
```html
<input type="radio" name="{name}" class="radio {MODIFIER}" />
```

#### Rules
- {MODIFIER} is optional and can have one of the size/color class names
- Replace {name} with a unique name for the radio group
- Each set of radio inputs should have unique `name` attributes to avoid conflicts with other sets of radio inputs on the same page

### range
Range slider is used to select a value by sliding a handle

[range docs](https://daisyui.com/components/range/)

#### Class names
- component: `range`
- color: `range-neutral`, `range-primary`, `range-secondary`, `range-accent`, `range-success`, `range-warning`, `range-info`, `range-error`
- size: `range-xs`, `range-sm`, `range-md`, `range-lg`, `range-xl`

#### Syntax
```html
<input type="range" min="0" max="100" value="40" class="range {MODIFIER}" />
```

#### Rules
- {MODIFIER} is optional and can have one of each color/size class names
- You must specify `min` and `max` attributes

### rating
Rating is a set of radio buttons that allow the user to rate something

[rating docs](https://daisyui.com/components/rating/)

#### Class names
- component: `rating`
- modifier: `rating-half`, `rating-hidden`
- size: `rating-xs`, `rating-sm`, `rating-md`, `rating-lg`, `rating-xl`

#### Syntax
```html
<div class="rating {MODIFIER}">
  <input type="radio" name="rating-1" class="mask mask-star" />
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/size class names
- Each set of rating inputs should have unique `name` attributes to avoid conflicts with other ratings on the same page
- Add `rating-hidden` for the first radio to make it hidden so user can clear the rating

### select
Select is used to pick a value from a list of options

[select docs](https://daisyui.com/components/select/)

#### Class names
- component: `select`
- style: `select-ghost`
- color: `select-neutral`, `select-primary`, `select-secondary`, `select-accent`, `select-info`, `select-success`, `select-warning`, `select-error`
- size: `select-xs`, `select-sm`, `select-md`, `select-lg`, `select-xl`

#### Syntax
```html
<select class="select {MODIFIER}">
  <option>Option</option>
</select>
```

#### Rules
- {MODIFIER} is optional and can have one of each style/color/size class names

### skeleton
Skeleton is a component that can be used to show a loading state

[skeleton docs](https://daisyui.com/components/skeleton/)

#### Class names
- component: `skeleton`

#### Syntax
```html
<div class="skeleton"></div>
```

#### Rules
- Add `h-*` and `w-*` utility classes to set height and width

### stack
Stack visually puts elements on top of each other

[stack docs](https://daisyui.com/components/stack/)

#### Class Names:
- Component: `stack`
- Modifier: `stack-top`, `stack-bottom`, `stack-start`, `stack-end`

#### Syntax
```html
<div class="stack {MODIFIER}">{CONTENT}</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier class names
- You can use `w-*` and `h-*` classes to set the width and height of the stack, making all items the same size

### stat
Stat is used to show numbers and data in a block

[stat docs](https://daisyui.com/components/stat/)

#### Class names
- Component: `stats`
- Part: `stat`, `stat-title`, `stat-value`, `stat-desc`, `stat-figure`, `stat-actions`
- Direction: `stats-horizontal`, `stats-vertical`

#### Syntax
```html
<div class="stats {MODIFIER}">
  <div class="stat">{CONTENT}</div>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the direction class names
- It's horizontal by default but you can make it vertical with the `stats-vertical` class
- Content includes `stat-title`, `stat-value`, `stat-desc` inside a `stat`

### status
Status is a really small icon to visually show the current status of an element, like online, offline, error, etc

[status docs](https://daisyui.com/components/status/)

#### Class Names:
- Component: `status`
- Color: `status-neutral`, `status-primary`, `status-secondary`, `status-accent`, `status-info`, `status-success`, `status-warning`, `status-error`
- Size: `status-xs`, `status-sm`, `status-md`, `status-lg`, `status-xl`

#### Syntax
```html
<span class="status {MODIFIER}"></span>
```

#### Rules
- {MODIFIER} is optional and can have one of the color/size class names
- This component does not render anything visible

### steps
Steps can be used to show a list of steps in a process

[steps docs](https://daisyui.com/components/steps/)

#### Class Names:
- Component: `steps`
- Part: `step`, `step-icon`
- Color: `step-neutral`, `step-primary`, `step-secondary`, `step-accent`, `step-info`, `step-success`, `step-warning`, `step-error`
- Direction: `steps-vertical`, `steps-horizontal`

#### Syntax
```html
<ul class="steps {MODIFIER}">
  <li class="step">{step content}</li>
</ul>
```

#### Rules
- {MODIFIER} is optional and can have one of each direction/color class names
- To make a step active, add the `step-primary` class
- You can add an icon in each step using `step-icon` class
- To display data in `data-content` ,use `data-content="{value}"` at the `<li>`

### swap
Swap allows you to toggle the visibility of two elements using a checkbox or a class name

[swap docs](https://daisyui.com/components/swap/)

#### Class Names:
- Component: `swap`
- Part: `swap-on`, `swap-off`, `swap-indeterminate`
- Modifier: `swap-active`
- Style: `swap-rotate`, `swap-flip`

#### Syntax
Using checkbox
```html
<label class="swap {MODIFIER}">
  <input type="checkbox" />
  <div class="swap-on">{content when active}</div>
  <div class="swap-off">{content when inactive}</div>
</label>
```

Using class name
```html
<div class="swap {MODIFIER}">
  <div class="swap-on">{content when active}</div>
  <div class="swap-off">{content when inactive}</div>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/style class names
- Use only a hidden checkbox to control swap state or add/remove the `swap-active` class using JS to control state
- To show something when the checkbox is indeterminate, use `swap-indeterminate` class

### tab
Tabs can be used to show a list of links in a tabbed format

[tab docs](https://daisyui.com/components/tab/)

#### Class Names:
- Component: `tabs`
- Part: `tab`, `tab-content`
- Style: `tabs-box`, `tabs-border`, `tabs-lift`
- Modifier: `tab-active`, `tab-disabled`
- Placement: `tabs-top`, `tabs-bottom`

#### Syntax
Using buttons:
```html
<div role="tablist" class="tabs {MODIFIER}">
  <button role="tab" class="tab">Tab</button>
</div>
```

Using radio inputs:
```html
<div role="tablist" class="tabs tabs-box">
  <input type="radio" name="my_tabs" class="tab" aria-label="Tab" />
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the style/size class names
- Radio inputs are needed for tab content to work with tab click
- If tabs gets a background then every tab inside it becomes rounded from both top corners

### table
Table can be used to show a list of data in a table format

[table docs](https://daisyui.com/components/table/)

#### Class Names:
- Component: `table`
- Modifier: `table-zebra`, `table-pin-rows`, `table-pin-cols`
- Size: `table-xs`, `table-sm`, `table-md`, `table-lg`, `table-xl`

#### Syntax
```html
<div class="overflow-x-auto">
  <table class="table {MODIFIER}">
    <thead>
      <tr>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th></th>
      </tr>
    </tbody>
  </table>
</div>
```

#### Rules
- {MODIFIER} is optional and can have one of each modifier/size class names
- The `overflow-x-auto` class is added to the wrapper div to make the table horizontally scrollable on smaller screens

### textarea
Textarea allows users to enter text in multiple lines

[textarea docs](https://daisyui.com/components/textarea/)

#### Class Names:
- Component: `textarea`
- Style: `textarea-ghost`
- Color: `textarea-neutral`, `textarea-primary`, `textarea-secondary`, `textarea-accent`, `textarea-info`, `textarea-success`, `textarea-warning`, `textarea-error`
- Size: `textarea-xs`, `textarea-sm`, `textarea-md`, `textarea-lg`, `textarea-xl`

#### Syntax
```html
<textarea class="textarea {MODIFIER}" placeholder="Bio"></textarea>
```

#### Rules
- {MODIFIER} is optional and can have one of each style/color/size class names

### theme-controller
If a checked checkbox input or a checked radio input with theme-controller class exists in the page, The page will have the same theme as that input's value

[theme-controller docs](https://daisyui.com/components/theme-controller/)

#### Class names
- component: `theme-controller`

#### Syntax
```html
<input type="checkbox" value="{theme-name}" class="theme-controller" />
```

#### Rules
- The value attribute of the input element should be a valid daisyUI theme name

### timeline
Timeline component shows a list of events in chronological order

[timeline docs](https://daisyui.com/components/timeline/)

#### Class Names:
- Component: `timeline`
- Part: `timeline-start`, `timeline-middle`, `timeline-end`
- Modifier: `timeline-snap-icon`, `timeline-box`, `timeline-compact`
- Direction: `timeline-vertical`, `timeline-horizontal`

#### Syntax
```html
<ul class="timeline {MODIFIER}">
  <li>
    <div class="timeline-start">{start}</div>
    <div class="timeline-middle">{icon}</div>
    <div class="timeline-end">{end}</div>
  </li>
</ul>
```

#### Rules
- {MODIFIER} is optional and can have one of the modifier/direction class names
- To make a vertical timeline, add the `timeline-vertical` class to the `ul` element or just do nothing (because its the default style.)
- Add `timeline-snap-icon` to snap the icon to the start instead of middle
- Add the `timeline-compact` class to force all items on one side

### toast
Toast is a wrapper to stack elements, positioned on the corner of page

[toast docs](https://daisyui.com/components/toast/)

#### Class Names:
- Component: `toast`
- Placement: `toast-start`, `toast-center`, `toast-end`, `toast-top`, `toast-middle`, `toast-bottom`

#### Syntax
```html
<div class="toast {MODIFIER}">{CONTENT}</div>
```

#### Rules
- {MODIFIER} is optional and can have one of the placement class names

### toggle
Toggle is a checkbox that is styled to look like a switch button

[toggle docs](https://daisyui.com/components/toggle/)

#### Class Names:
- Component: `toggle`
- Color: `toggle-primary`, `toggle-secondary`, `toggle-accent`, `toggle-neutral`, `toggle-success`, `toggle-warning`, `toggle-info`, `toggle-error`
- Size: `toggle-xs`, `toggle-sm`, `toggle-md`, `toggle-lg`, `toggle-xl`

#### Syntax
```html
<input type="checkbox" class="toggle {MODIFIER}" />
```

#### Rules
- {MODIFIER} is optional and can have one of each color/size class names

### validator
Validator class changes the color of form elements to error or success based on input's validation rules

[validator docs](https://daisyui.com/components/validator/)

#### Class names
- component: `validator`
- part: `validator-hint`

#### Syntax
```html
<input type="{type}" class="input validator" required />
<p class="validator-hint">Error message</p>
```

#### Rules
- Use with `input`, `select`, `textarea`
